name: Gamegoo Socket Server DEV CI/CD

on:
  pull_request:
    types: [closed]
    branches:
      - develop
  push:
    branches:
      - ci/145
  workflow_dispatch: # 수동 실행 가능하도록

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      SOCKETIO_URL: ${{ secrets.DEV_SOCKETIO_URL }}
      API_SERVER_URL: ${{ secrets.DEV_API_SERVER_URL }}
      NODE_SERVER_URL: ${{ secrets.DEV_NODE_SERVER_URL }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EC2_HOST: ${{ secrets.DEV_EC2_HOST }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      EC2_LOG_PATH: ${{ secrets.EC2_LOG_PATH }}

    steps:
      # 1) GitHub checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # 3) npm install
      - name: Install dependencies
        run: npm install

      # 4) Docker Buildx 설정
      - name: Docker Buildx setup
        uses: docker/setup-buildx-action@v3

      # 5) Docker Hub 로그인
      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      # 6) Docker 이미지 빌드 & 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile-dev
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/gamegoo-socket-dev:${{ github.sha }}
          platforms: linux/amd64
          build-args: |
            JWT_SECRET=${{ env.JWT_SECRET }}
            SOCKETIO_URL=${{ env.SOCKETIO_URL }}
            API_SERVER_URL=${{ env.API_SERVER_URL }}
            NODE_SERVER_URL=${{ env.NODE_SERVER_URL }}

      # 7) SSH로 EC2 접속하여 Docker 컨테이너 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.EC2_HOST }} # EC2 퍼블릭 IP
          username: ubuntu
          key: ${{ env.EC2_SSH_KEY }} # SSH Private Key
          port: 22 # SSH 포트 (기본 22)
          script_stop: true # 스크립트 실패 시 중단
          script: |
            echo "Stopping existing container..."
            docker stop gamegoo-socket-dev || true
            echo "Removing existing container..."
            docker rm gamegoo-socket-dev || true

            echo "Pulling new Docker image..."
            docker pull ${{ env.DOCKERHUB_USERNAME }}/gamegoo-socket-dev:${{ github.sha }}

            echo "Running new Docker container..."
            docker run -d -p 3000:3000 \
              --name gamegoo-socket-dev \
              -e JWT_SECRET=${{ env.JWT_SECRET }} \
              -e SOCKETIO_URL=${{ env.SOCKETIO_URL }} \
              -e API_SERVER_URL=${{ env.API_SERVER_URL }} \
              -e NODE_SERVER_URL=${{ env.NODE_SERVER_URL }} \
              ${{ env.DOCKERHUB_USERNAME }}/gamegoo-socket-dev:${{ github.sha }}

      # # 실패 시 디스코드에 알림 보내기
      # - name: 배포 실패 시 디스코드 알림 전송
      #   if: failure() # 이전 스텝이 실패한 경우에만 실행
      #   run: |
      #     PR_NUMBER="${{ github.event.pull_request.number }}"
      #     PR_TITLE="${{ github.event.pull_request.title }}"
      #     PR_AUTHOR="${{ github.event.pull_request.user.login }}"
      #     PR_URL="${{ github.event.pull_request.html_url }}"
      #     curl -X POST -H "Content-Type: application/json" \
      #     -d "{\"content\": \"🚨 **Gamegoo Socket DEV 서버 배포 실패** 🚨\nPR 번호: ${PR_NUMBER}\nPR 제목: ${PR_TITLE}\nPR 작성자: ${PR_AUTHOR}\n[PR 보기](${PR_URL})\"}" \
      #     $DISCORD_WEBHOOK_URL
